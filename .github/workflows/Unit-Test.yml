---
name: Run Unit Tests on PR
on: workflow_call
jobs:
  container_tests:
    strategy:
      matrix:
        arch: [x86_64, armv7l]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
      - name: Set up QEMU
        if: matrix.arch == 'armv7l'
        uses: docker/setup-qemu-action@v3.2.0
      - name: Get all changed package files
        id: changed-ruby-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
             packages/*.rb
      - name: Export variables to github context
        run: |
            # Convert "packages/foo.rb packages/bar.rb" (from steps.changed-ruby-files.outputs.all_changed_files) into "foo bar"
            echo "CHANGED_PACKAGES=$(echo "${{ steps.changed-ruby-files.outputs.all_changed_files }}" | xargs basename -s .rb | xargs)" >> $GITHUB_ENV
      - name: Determine glibc and architecture package compatibility
        run: |
            # If a package doesnt have a min_glibc value, or if its below 2.27, add it to the list
            echo "PR #${{ github.event.pull_request.number }} has these possibly Glibc 2.27 compatible packages: $(for i in ${CHANGED_PACKAGES} ; do if ! grep -q min_glibc packages/$i.rb; then echo $i ; else grep min_glibc packages/$i.rb | tr -d \' | awk '{exit $2 <= 2.27}' || echo $i ; fi ; done | xargs)"

            # If a package doesnt have a min_glibc value, or if its below 2.37, add it to GLIBC_237_COMPATIBLE_PACKAGES
            echo "GLIBC_237_COMPATIBLE_PACKAGES=$(for i in ${CHANGED_PACKAGES} ; do grep min_glibc packages/$i.rb | tr -d \' | awk '{exit $2 <= 2.37}' || echo $i ; done | xargs)" >> $GITHUB_ENV
            echo "PR #${{ github.event.pull_request.number }} has these possibly Glibc 2.37 compatible packages: ${GLIBC_237_COMPATIBLE_PACKAGES}"

            # If a package has a compatibility of 'all' or one that includes 'x86_64', add it to the list.
            echo "PR #${{ github.event.pull_request.number }} has these x86_64 compatible packages: $(for p in ${CHANGED_PACKAGES}; do grep -q "compatibility 'all'\|compatibility '.*x86_64.*'" packages/${p}.rb && echo ${p}; done | xargs)"

            # If a package has a compatibility of 'all' or one that includes 'armv7l', add it to the list.
            echo "PR #${{ github.event.pull_request.number }} has these armv7l compatible packages: $(for p in ${CHANGED_PACKAGES}; do grep -q "compatibility 'all'\|compatibility '.*armv7l.*'" packages/${p}.rb && echo ${p}; done | xargs)"
      - name: Export target docker container to github context
        env:
          TARGET_ARCH: ${{ matrix.arch }}
        run: |
            case $TARGET_ARCH in
              x86_64)
              # Export the x86_64 container depending on whether this PR updates packages with a minimum glibc greater than or equal to 2.37.
              if [[ $GLIBC_237_COMPATIBLE_PACKAGES ]]; then
                  echo "CONTAINER=hatch-x86_64.m126" >> $GITHUB_ENV
              else
                  echo "CONTAINER=nocturne-x86_64.m90" >> $GITHUB_ENV
              fi
              echo "PLATFORM=linux/amd64" >> $GITHUB_ENV
              echo "LIB_SUFFIX=64" >> $GITHUB_ENV
              ;;
              armv7l)
              # Export the armv7l container depending on whether this PR updates packages with a minimum glibc greater than or equal to 2.37.
              if [[ $GLIBC_237_COMPATIBLE_PACKAGES ]]; then
                  echo "CONTAINER=strongbad-armv7l.m126" >> $GITHUB_ENV
              else
                  echo "CONTAINER=fievel-armv7l.m91" >> $GITHUB_ENV
              fi
              echo "PLATFORM=linux/arm/v7" >> $GITHUB_ENV
              echo "LIB_SUFFIX=" >> $GITHUB_ENV
              ;;
            esac
      - name: Run unit tests
        run: |
             sudo docker run \
             --platform $PLATFORM \
             -v "${{ github.workspace }}/tests/unit_test.sh:/unit_test.sh" \
             -u chronos \
             -e CHANGED_PACKAGES="$CHANGED_PACKAGES" \
             -e LD_LIBRARY_PATH="/usr/local/lib$LIB_SUFFIX" \
             -e CREW_REPO="${{ github.event.pull_request.head.repo.clone_url }}" \
             -e CREW_BRANCH="${{ github.head_ref }}" \
             "satmandu/crewbuild:$CONTAINER" \
             /usr/local/bin/bash /unit_test.sh
