---
name: Generate Updates PR
on:
  schedule:
    - cron: '0 0 * * *'  # Daily
  workflow_dispatch:
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # setting GH_TOKEN for the entire workflow
permissions:                    # Global permissions configuration starts here
  actions: write
  contents: write
  packages: write
  pull-requests: write          # 'write' access to pull requests
jobs:
  update-check:
    if: ${{ github.repository_owner == 'chromebrew' }}
    runs-on: ubuntu-24.04
    outputs:
      output1: ${{ steps.set-variables.outputs.TIMESTAMP }}  # https://stackoverflow.com/a/75142892
      output2: ${{ steps.set-variables.outputs.UPDATE_BRANCH_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.6'
      - name: Install Python pip
        run: sudo apt install -y python3-pip
      - name: Install activesupport
        run: sudo apt install -y ruby-activesupport
      - name: Set workflow & branch variables
        id: set-variables
        run: |
          export TIMESTAMP="$(date -u +%F-%H-%M)"
          export UPDATE_BRANCH_NAME="updates-${TIMESTAMP}"
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "UPDATE_BRANCH_NAME=${UPDATE_BRANCH_NAME}" >> $GITHUB_OUTPUT
      - name: Git setup
        env:
          UPDATE_BRANCH_NAME: ${{ steps.set-variables.outputs.UPDATE_BRANCH_NAME }}
        run: |
          git pull && ( git checkout -b ${UPDATE_BRANCH_NAME} || git checkout ${UPDATE_BRANCH_NAME} )
      - name: Check for updates in pip packages.
        id: pip-update-checks
        env:
          UPDATE_BRANCH_NAME: ${{ steps.set-variables.outputs.UPDATE_BRANCH_NAME }}
        run: |
          tools/update_python_pip_packages.rb
          # Create a new branch with the updated package files only
          # if there are updated packages. Otherwise exit early.
          if [ -n "$(git status --porcelain)" ]; then
            echo "Python pip packages were updated."
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add -A
            git commit -m "Add unbuilt updated pip packages to ${UPDATE_BRANCH_NAME}"
            echo "PIP_UPDATED=true" >> $GITHUB_OUTPUT
          else
            echo "Python pip packages were not updated."
            echo "PIP_UPDATED=false" >> $GITHUB_OUTPUT
          fi
      - name: Push pip package changes
        if: ${{ steps.pip-update-checks.outputs.PIP_UPDATED == 'true' }}
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ steps.set-variables.outputs.UPDATE_BRANCH_NAME }}
      - name: Check for updates in ruby gem packages.
        id: gem-update-checks
        env:
          UPDATE_BRANCH_NAME: ${{ steps.set-variables.outputs.UPDATE_BRANCH_NAME }}
        run: |
          tools/update_ruby_gem_packages.rb
          # Create a new branch with the updated package files only
          # if there are updated packages. Otherwise exit early.
          if [ -n "$(git status --porcelain)" ]; then
            echo "Ruby gem packages were updated."
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add -A
            git commit -m "Add unbuilt updated ruby gem packages to ${UPDATE_BRANCH_NAME}"
            echo "GEM_UPDATED=true" >> $GITHUB_OUTPUT
          else
            echo "Ruby gem packages were not updated."
            echo "GEM_UPDATED=false" >> $GITHUB_OUTPUT
          fi
      - name: Push ruby gem package changes
        if: ${{ steps.gem-update-checks.outputs.GEM_UPDATED == 'true' }}
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ steps.set-variables.outputs.UPDATE_BRANCH_NAME }}
      - name: Cancel if no updates
        id: no-update-cancel
        if: ${{ steps.pip-update-checks.outputs.PIP_UPDATED == 'false' }} && ${{ steps.gem-update-checks.outputs.GEM_UPDATED == 'false' }}
        run: |
          echo "PIP_UPDATED is ${{ steps.pip-update-checks.outputs.PIP_UPDATED }}."
          echo "GEM_UPDATED is ${{ steps.gem-update-checks.outputs.GEM_UPDATED }}."
          git checkout master && git branch -D ${{ steps.set-variables.outputs.UPDATE_BRANCH_NAME }} && git push
          # https://stackoverflow.com/a/75809743
          # gh run cancel ${{ github.run_id }}
          # gh run watch ${{ github.run_id }}
  generate:
    strategy:
      max-parallel: 1
      matrix:
        arch: [x86_64, armv7l, i686]
        runner:
          - [self-hosted, X64]
          - [self-hosted, ARM]
        exclude:
          - arch: x86_64
            runner: [self-hosted, ARM]
          - arch: i686
            runner: [self-hosted, ARM]
          - arch: armv7l
            runner: [self-hosted, X64]
    runs-on: ${{ matrix.runner }}
    needs: update-check
    if: ${{ !cancelled() }}
    concurrency:
      group: ${{ matrix.arch }}-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
      - name: Export target docker container to github context
        env:
          TARGET_ARCH: ${{ matrix.arch }}
        run: |
            case $TARGET_ARCH in
              x86_64)
                echo "CONTAINER=nocturne-x86_64.m90" >> $GITHUB_ENV
                echo "PLATFORM=linux/amd64" >> $GITHUB_ENV
                echo "LIB_SUFFIX=64" >> $GITHUB_ENV
              ;;
              armv7l)
                echo "CONTAINER=fievel-armv7l.m91" >> $GITHUB_ENV
                echo "PLATFORM=linux/arm/v7" >> $GITHUB_ENV
                echo "LIB_SUFFIX=" >> $GITHUB_ENV
              ;;
              i686)
                echo "CONTAINER=alex-i686.m58" >> $GITHUB_ENV
                echo "PLATFORM=linux/386" >> $GITHUB_ENV
                echo "LIB_SUFFIX=" >> $GITHUB_ENV
              ;;
            esac
      - name: Run Updater in container
        id: run-updater
        if: ${{ !cancelled() }}
        env:
          #  CREW_REPO: "https://github.com/chromebrew/chromebrew.git"
          CREW_REPO: "https://github.com/${{ github.repository }}.git"
          CREW_BRANCH: ${{ needs.update-check.outputs.output2 }}
        run: |
            git pull && git checkout ${CREW_BRANCH}
            docker pull --platform ${PLATFORM} satmandu/crewbuild:${CONTAINER}
            sudo apt install -y acl
            sudo setfacl -R -m u:1000:rwx .
            # getfacl .
            # Use docker-in-docker shim to mount volume inside docker.
            # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            # ghcr.io/felipecrs/dond-shim:latest \
            (cd /tmp ; curl -OLf https://github.com/felipecrs/docker-on-docker-shim/raw/refs/tags/v0.7.1/dond ; chmod +x /tmp/dond )
            # docker run \
            /tmp/dond run \
              --rm \
              --platform ${PLATFORM} \
              --privileged \
              -u chronos \
              -e LD_LIBRARY_PATH="/usr/local/lib${LIB_SUFFIX}" \
              -e GCONV_PATH="/usr/local/lib${LIB_SUFFIX}/gconv" \
              -e CREW_REPO="${CREW_REPO}" \
              -e CREW_BRANCH="${CREW_BRANCH}" \
              -e GITLAB_TOKEN="${{ secrets.GITLAB_TOKEN }}" \
              -e GITLAB_TOKEN_USERNAME="${{ secrets.GITLAB_TOKEN_USERNAME }}" \
              -v $(pwd):/output \
              "satmandu/crewbuild:${CONTAINER}" \
              /bin/chromebrewstart /output/tools/github_actions_update_builder.sh  > >(tee -a /tmp/build.log) 2> >(tee -a /tmp/build.log >&2)
              grep "Built and Uploaded:" /tmp/build.log
              sudo rm -rf release
      - name: Add updated packages to PR.
        id: push-check
        env:
          UPDATE_BRANCH_NAME: ${{ needs.update-check.outputs.output2 }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add -A
            git commit -m "Add updated packages for ${PLATFORM} to ${UPDATE_BRANCH_NAME}"
          fi
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ needs.update-check.outputs.output2 }}
  build-check:
    runs-on: ubuntu-24.04
    needs:
      - update-check
      - generate
    if: ${{ !cancelled() }}
    steps:
      - name: fail if update jobs failed, otherwise create a PR
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
      - name: Report build success
        run: echo "Update jobs succeeded. Creating a PR."
      - uses: actions/checkout@v4
        with:
          clean: false
          persist-credentials: true
          ref: ${{ needs.update-check.outputs.output2 }}
      - name: Create Pull Request
        env:
          CREW_BRANCH: ${{ needs.update-check.outputs.output2 }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git fetch --depth=5
          # Add some debugging...
          git log --oneline | grep $CREW_BRANCH
          git log --oneline | grep $CREW_BRANCH | tail -n 1 | awk '{print $1}'
          git rev-parse --verify HEAD
          git diff-tree --no-commit-id --name-only -r $(git log --oneline | grep $CREW_BRANCH | tail -n 1 | awk '{print $1}')..$(git rev-parse --verify HEAD)
          mapfile -t updated_package_array < <( git diff-tree --no-commit-id --name-only -r $(git log --oneline | grep $CREW_BRANCH | tail -n 1 | awk '{print $1}')..$(git rev-parse --verify HEAD) | grep -v manifest | grep "^packages" | sed -e 's,packages/,,' -e 's,.rb,,')
          echo -e "Updated packages:" > /tmp/pr.txt
          for file in "${updated_package_array[@]}"
            do
            echo "- ${file}" >> /tmp/pr.txt
          done
          gh pr create --title "Automatic PR to update packages for ${{ needs.update-check.outputs.output1 }}" -F /tmp/pr.txt
      - name: Add active team reviewers to PR
        run: |
          gh pr list --search ${{ needs.update-check.outputs.output1 }} --json number
          export PR_NUMBER="$(gh pr list --search ${{ needs.update-check.outputs.output1 }} --json number | jq -r '.[].number')"
          echo "PR is #${PR_NUMBER}"
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos${{ github.owner }}/${{ github.repository }}/pulls/${PR_NUMBER}/requested_reviewers \
            -d '{"team_reviewers":["active"]}'
